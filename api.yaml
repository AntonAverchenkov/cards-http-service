openapi: '3.0.0'
info:
  title:       cards-http-service
  description: A simple stateful rest api server for a deck of cards
  version:     1.0.0

consumes:
  - application/json
produces:
  - application/json
schemes:
  - http

paths:

  /:
    get:
      summary: Get documentation that describes this api
      operationId: Index
      responses:
        200:
          description: index.html that describes this api
          content:
            text/html:
              schema:
                type: string
  /cards:
    get:
      summary: Get the current state of the deck
      operationId: DeckShow
      responses:
        200:
          description: The current state of the deck
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'

  /cards/shuffle:
    post:
      summary: Permute the deck in an unbiased way
      operationId: DeckShuffle
      responses:
        200:
          description: The state of the deck after shuffling
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'

  /cards/deal:
    post:
      summary: Deals the top card by removing it from the deck
      operationId: DeckDealCard
      responses:
        200:
          description: The card that was dealt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        409:
          description: The deck is empty and there are no more cards to deal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cards/return:
    post:
      summary: Return the card specified in body to the back of the deck
      operationId: DeckReturnCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        201:
          description: The card was successfully returned to the back of the deck
        400:
          description: The card could not be parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The card already exists or the deck is full and the card cannot be added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      responses:
        201:
          description: The card was successfully returned to the back of the deck
        400:
          description: The card could not be parsed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: The card already exists or the deck is full and the card cannot be added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:

  schemas:

    Card:
      type: object
      properties:
        value:
          type: string
          example: queen
          minLength: 1
        suit:
          type: string
          example: hearts
          minLength: 1
      required:
        - value
        - suit

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
