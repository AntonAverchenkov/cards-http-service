// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX328bNwz+VwhtQDfAqZ1sLztgGLZ1GArsYWj3VuSBlng+tXeSSvGSHAr/7wMl/0ji",
	"OC66Itiwvvh8J0r8+PGjKH0wNg4pBgqSTfPBZNvRgOXvr8hOn4ljIhZP1WD0ok+6wSH1ZBrTEbJkMzOD",
	"D39QWElnmvOZkSnpaBb2YWXWM3OF/Uh3p74ficKpmeuZYXo/eiZnmjebZWYVyOXOOi7fkhX18xtz5EPg",
	"A+WMqwLgcQdbw8O11dLGkMdBl3xjMKXeWxQfw/xtjkGn+NBG9eEoW/ZJx0xjfobsNWbIgkLt2ANTFsDk",
	"IRNfEUMbGRAc2XcQW7DITikVL4Wo8n7WiaQztfdWGbgiznX58+eL5wuNPSYKmLxpzHfl08wklK7EP9ef",
	"FZXkKS8F9ktnGvMyOLoxSkJOMeRK18VioQ8bg1Aok4RuZN7J0O918hCZ69m92L0u/1wngnQoUEeXlEE6",
	"n5WDkoI8DgPyZBrzOwm4aMeBghSU8JFLzCttx+J8Qfbd6y5enw71ILF3IvZCQ5n4NVNrGvPVfF9D800B",
	"zUv1rHcSQmacHmLnr47AjswUpIpD0y8dFSk8QIyctK8szB1h/ygVLwh7RXnxT/k4TcORsJFdzec1ZlC8",
	"pX6/X/zw2dzXveCI/1JsPgMNSSbAoGCICZAJQoQhcsWYQWKBdy8dSmChXmKqwSwnYBrilQ8r8AItx2GX",
	"G/jGh7Mlx+tMDEJZ1KijPhF/q2GnmE8k6kueniJPt2uISUYOj1bRq2KyraOEjAMJsfaH+03gdRdZztrI",
	"A0SGPoZVfaFgo1Mom0qufEeo3vXfDpv2l9o3eTIzE3DYdgftiDuq9x0WbdkgPq5Hry8PFHZ+2Mt2klA1",
	"5NFayrkd+37aACa3hbzE2s321KpqFk+jmgLRxrF3EKLAkiAhZ3JPKt0CAnsmdBPQjc+SNfdyS9VK3VbU",
	"G9AYNojROQV8R82vNqrYWudE1reeHPj69dlP+v3HZ7AT47F8fPqWtFe9qYcnyvJLdNNn34/WXxT531fk",
	"MrrpeAb2223uxrbt6cQBrthc/OsOcQeHMcBWa68Gtb1o7Fn7k3gYhW4xHwADjGHpMZNqefr0+tyw9H8g",
	"qbpKHN1oj1/LCtg6rLcoc7n+OwAA//+wkEeY+g4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
