// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW8bRwz9K8S0R9my3VyqW9sURYAeiqS3wAdqhqudZOcjHK7jRaD/XnBGH7ZlSQVq",
	"BC2ai1frIWceHx/J2S/GppBTpCjFLL6YYnsKWH/+guz0mTllYvHUDEYv+qR7DHkgszA9IUsxMxN8/J3i",
	"SnqzuJ4ZmbKuFmEfV2Y9M3c4jPTY9dNIFM95rmeG6dPomZxZvN9sM2tAbnfWafmBrOg5vzInPgQeqBRc",
	"VQCnD9gaHu6tljbFMgbd8r3BnAdvUXyK8w8lRXXxsUt6hqNi2WddMwvzExSvMUMRFOrGAZiKAGYPhfiO",
	"GLrEgODIfoTUgUV2Sql4qUTV94teJF+ovbfKwB1xadtfX15dXmnsKVPE7M3C/FD/NTMZpa/xz/XPimry",
	"lJcK+40zC/MmOro3SkLJKZZG183VlT5sikKxOgndy7yXMOx18hyZ69mT2L1uf6mOID0KtNUlFZDeF+Wg",
	"pqCMISBPZmF+IwGX7BgoSkV50m/euDoW3GuyH9/16fP5+A6y+ShMLxSq4/dMnVmY7+b7wplvqmZeS2a9",
	"0w0y4/QcJX/2BHZkpihNEZpz6anm/xk25Kx9Y2HuCIeTVLwmHBTlzT/l4zwNR8JGdi2fn7GA4q1F++rq",
	"xxc7vjWAI+fXCvMFKGSZAKOCISZAJogJQuKGsYCkCu9JOpTAUrmXlFs0ywmYQrrzcQVeoOMUHiRnZnIq",
	"Z7LxLRlfKRn7SmGSkePJWnlbTbbVkpExkBBr63/a39/1ieWiSxwgMQwprtoLRZucQtnUayM8QTtdf+2w",
	"6ehoI5EnMzMRw7bx67Dbcb0fnmhrG/h743d9eyCx68MxtdOEyqGM1lIp3TgM0wYwuS3kJbZB9VDnr15Q",
	"tSdlUyHaNA4OYhJYEmTkQu6rareCwIEJ3QR074sUzb08kLVSt1X1BjTGDWJ0TgE/kvPbjSq21iWT9Z0n",
	"Bz7CyMMp8o83mb2MTbvoUJGfk5tevMOsv0nsvy2xZXLTcfb3vbP0Y9cNdObOVW1u/nX3roP7E2AnxNCC",
	"2n4Q7Bn7gziMQg9Yj4ARxrj0WEh1PJ2uvw0T/w8i1CVzcqM9/olUwbZl/aIxt+u/AgAA//9aOvtVhg4A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
