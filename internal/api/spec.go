// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVzW4bNxB+lQHbo2LJbS/dW9sURYAeiqa3IIcROatlskvSM0PHi0DvXgxXlurIsg8N",
	"jFy0kjjD+f7I/ex8nkpOlFRc99mJH2jC9vU35GDPwrkQa6SloEa1J93hVEZynRsIWcWt3BTTn5R2Orju",
	"euV0LrYqyjHt3H7lbnGs9LD1phKl5zr3K8d0UyNTcN27wzarBcj7Y3XefiCvNud35sznwCcSwV0D8PSA",
	"+8Lzva3S5yR1si3fOSxljB415rT+IDlZS0x9thmBxHMstuY69wtINM4gikp9HYFJFLBEEOJbYugzA0Ig",
	"/xFyDx45mKQatQnVfr8aVMsrq4/eFLgllmX766vN1ca450IJS3Sd+7H9tXIFdWj81/axo2ae6dJgvwmu",
	"c29SoDtnIkjJSRa5fths7OFzUkqtSelO14NO4yknj4m5X33BPdr2V9YIOqDCsrolAR2imAbNAqnThDy7",
	"zv1BCiH7OlHShvLJvvWi1SVyr8l/fDvkT8/zO3PzAc2oNLXG75l617nv1qeDsz6cmnU7MvtjbpAZ58ck",
	"+Wcg8JWZki6JMM91oOb/I2ros/WLCutA2OwpWS5o8ZpwbDD/px7Py3CBNnJY/PyEAoa3HdqfNj9/tfHL",
	"BXBhfjthUYCmojNgMjDEBMgEKcOUecEooLnB+8IO00+a9prLwmY7A9OUb2PaQVToOU+PmsOkldPT9vzd",
	"ao4G3VQS/TWH+at7sz/z//r82joaZl5J9Z5E+jqORthwUjCVjOsWl4vrxNs83byMpw2iz3UMkLLClqAg",
	"C4UXDVYDgSMThhnoLooKZD4KYpkz6e4jdwCN6YAYQzDAD7K2hOFULYV87CMFiAm2OcyX1T+lToba9yM9",
	"Hbu3h6Jv7ZI8u+wAeyWGhdT92/uk2F/EU1X6j+oJMEFN24hCluPDqMI5VH/5Nd7ALsv21nXv9/8GAAD/",
	"/2giUnoqCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
