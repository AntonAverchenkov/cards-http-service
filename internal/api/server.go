// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get documentation that describes this api
	// (GET /)
	Index(ctx echo.Context) error
	// Get the current state of the deck
	// (GET /cards)
	DeckShow(ctx echo.Context) error
	// Deals the top card by removing it from the deck
	// (POST /cards/deal)
	DeckDealCard(ctx echo.Context) error
	// Return the card specified in body to the back of the deck
	// (POST /cards/return)
	DeckReturnCard(ctx echo.Context) error
	// Permute the deck in an unbiased way
	// (POST /cards/shuffle)
	DeckShuffle(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Index converts echo context to params.
func (w *ServerInterfaceWrapper) Index(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Index(ctx)
	return err
}

// DeckShow converts echo context to params.
func (w *ServerInterfaceWrapper) DeckShow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeckShow(ctx)
	return err
}

// DeckDealCard converts echo context to params.
func (w *ServerInterfaceWrapper) DeckDealCard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeckDealCard(ctx)
	return err
}

// DeckReturnCard converts echo context to params.
func (w *ServerInterfaceWrapper) DeckReturnCard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeckReturnCard(ctx)
	return err
}

// DeckShuffle converts echo context to params.
func (w *ServerInterfaceWrapper) DeckShuffle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeckShuffle(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Index)
	router.GET(baseURL+"/cards", wrapper.DeckShow)
	router.POST(baseURL+"/cards/deal", wrapper.DeckDealCard)
	router.POST(baseURL+"/cards/return", wrapper.DeckReturnCard)
	router.POST(baseURL+"/cards/shuffle", wrapper.DeckShuffle)

}
